<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Dottoro Highlighter Dialog</title>

		<script type="text/javascript" src="../../../wp-includes/js/tinymce/tiny_mce_popup.js"></script>


		<script type="text/javascript">

			var HighlightDialog = {
				local_dr : 'dr',
				init : function(dr) {
					HighlightDialog.local_dr = dr;
					tinyMCEPopup.resizeToInnerSize();
//					dr.dr_syntax_values = this.isInSyntaxBlockAlready (dr);
					if (dr.dr_syntax_values) {
						SetDefaultValues (dr.dr_syntax_values[1]);
					}
				},
				
				insert : function (dr) {

					var sel = tinyMCEPopup.getWindowArg("selection");

					if (dr.dr_syntax_values) {
						var syntaxNode = dr.dr_syntax_values[0];
					}

					var lang = document.getElementById ("lang");
					var width = document.getElementById ("width");
					var height = document.getElementById ("height");

					var settings = "lang:" + lang.options[lang.selectedIndex].value;
					if (width.value) {
						var w = isNaN (width.value)? width.value : width.value + "px";
						settings += ";width:" + w;
					}
					if (height.value) {
						var h = isNaN (height.value)? height.value : height.value + "px";
						settings += ";height:" + h;
					}

					var compress = null;
					var compressRadios = document.getElementsByName ("compress");
					for (var i=0; i < compressRadios.length; i++) {
						if (compressRadios[i].checked) {
							compress = compressRadios[i].value;
							break;
						}
					}
					settings += (compress != null)? ";compress:" + compress : "";

					var line_nrs = null;
					var line_nrs_Radios = document.getElementsByName ("lineNumbers");
					for (var i=0; i < line_nrs_Radios.length; i++) {
						if (line_nrs_Radios[i].checked) {
							line_nrs = line_nrs_Radios[i].value;
							break;
						}
					}
					settings += (line_nrs != null)? ";lineNumbers:" + line_nrs : "";

					if (dr.dr_syntax_values) {
						syntaxNode.setAttribute ("drsyntax", settings);
					} else {
						sel = EncodeHTML (sel);
						tinyMCEPopup.execCommand ('mceReplaceContent', false, '<pre drsyntax="' + settings + '">' + sel + '</pre>');
					}

					// Return
					tinyMCEPopup.close();
				}
			};

			tinyMCEPopup.onInit.add(HighlightDialog.init, HighlightDialog);

			function SetDefaultValues (dr_syntax_values) {
				var values = dr_syntax_values.split (";");
				var initValues =  new Array ();
				for (var i=0; i < values.length; i++) {
					var idx = values[i].indexOf (":");
					var id = values[i].substring (0, idx);
					var val = values[i].substring (idx + 1);

					switch (id) {
						case "width":
						case "height":
							try {
								var elem = document.getElementById (id);
								elem.value = val;
							} catch (e) {}
							break;
						case "compress":
						case "lineNumbers":
							try {
								var radios = document.getElementsByName (id);
								for (var j=0; j < radios.length; j++) {
									if (radios[j].value == val) {
										radios[j].checked = true;
									}
								}
							} catch (e) {}
							break;
						case "lang":
							try {
								var select = document.getElementById (id);
								for (var j=0; j < select.options.length; j++) {
									if (select.options[j].value == val) {
										select.options[j].selected = true;
									}
								}
							} catch (e) {}
							break;
					}

				}
			}

			function EncodeHTML (html) {
				html = html.replace (/\</g, "&lt;");
				html = html.replace (/\>/g, "&gt;");
				return html;
			}

			document.write('<base href="'+tinymce.baseURL+'" />');
		</script>
		<style>
			a {
				text-decoration: none;
				font-weight: bold;
			}
			h3 {
				font-size:14px;
				font-weight:normal;
				margin:16px 0px;
			}
			.td_bg {
				font-size:12px !Important;
			}
		</style>
		<base target="_self" />
	</head>
	<body>
		<div align="center" id="highlight-dialog">
			<form action="/" method="get" accept-charset="utf-8">
				<div style="text-align:center; color:#21759b; font-size:16px; font-family:georgia, 'Times New Roman';">Dottoro Syntax Highlighter</div>
				<table class="form-table" cellspacing="0" style="border-collapse:collapse; margin-bottom:16px;">
					<tr valign="top">
						<td colspan="2"><h3>Required</h3></td>
					</tr>
					<tr>
						<td scope="row" class="td_bg">Code Language:</td>
						<td class="td_bg">
							<select name="lang" id="lang" size="1">
								<option value="css">Css</option>
								<option value="html" selected>HTML</option>
								<option value="javascript">JavaScript</option>
								<option value="xml">XML</option>
							</select>
						</td>
					</tr>
					<tr valign="top">
						<td colspan="2"><h3>Optional</h3></td>
					</tr>
					<tr>
						<td scope="row" class="td_bg"><label for="width">Width:</label></td>
						<td class="td_bg">
							<input type="text" name="width" id="width" />
						</td>
					</tr>
					<tr>
						<td scope="row" class="td_bg"><label for="height">Height:</label></td>
						<td class="td_bg">
							<input type="text" name="height" id="height" />
						</td>
					</tr>
					<tr>
						<td scope="row" class="td_bg"><label for="compress">Compress:</label></td>
						<td class="td_bg">
							yes: <input type="radio" name="compress" id="compress" value="on" />
							no: <input type="radio" name="compress" id="compress" value="off" />
						</td>
					</tr>
					<tr>
						<td scope="row" class="td_bg"><label for="lineNumbers">Line numbers:</label></td>
						<td class="td_bg">
							yes: <input type="radio" name="lineNumbers" value="on" />
							no: <input type="radio" name="lineNumbers" value="off" />
						</td>
					</tr>
				</table>

				<button onclick="HighlightDialog.insert(HighlightDialog.local_dr)">Highlight</button>
			</form>
		</div>
	</body>
</html>